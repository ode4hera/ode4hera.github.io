# -*- coding: utf-8 -*-
#
# Author: Francesco Torrigiani, francesco.torrigiani@dlr.de
#
# Copyright (c) 2023, (DLR)
# All rights reserved.
#
# http://www.dlr.de/sl/
#
from pathlib import Path
from datetime import datetime
from rdflib import Graph, URIRef, Literal
from rdflib.namespace import DCTERMS
from urllib.error import URLError

filedir = Path(__file__).parent
DATA_DIR = filedir / 'data'


def change_serialization(rdf_file, in_format='ttl', out_format='xml', out_extension=None):
    """
    New serialized file is saved (as .owl) in the same directory of the input file
    :param rdf_file: input RDF filepath
    :param in_format: input RDF serialization format, see <https://rdflib.readthedocs.io/en/stable/intro_to_parsing.html#saving-rdf>
    :param out_format: output RDF serialization format, see <https://rdflib.readthedocs.io/en/stable/intro_to_parsing.html#saving-rdf>
    :param out_extension: output RDF extension if different from RDF serialization format
    """
    out_extension = '.' + out_format if out_extension is None else out_extension
    rdf_filepath = Path(rdf_file)
    g = Graph()
    g.parse(rdf_file, format=in_format)
    new_rdf_filepath = rdf_filepath.with_suffix(out_extension)
    g.serialize(format=out_format, destination=new_rdf_filepath)


def rdf_to_htmldoc(rdf_file, html_file=None):
    """
    :param rdf_file: input RDF filepath
    :param html_file: output HTML documentation filepath
    """
    from pylode import OntPub
    if html_file is None:
        rdf_filepath = Path(rdf_file)
        html_file = rdf_filepath.with_suffix('.html')
    od = OntPub(ontology=rdf_file)
    od.make_html(destination=html_file)


def update_onto_date(rdf_file, onto_uri, date=None, rdf_format='ttl'):
    """
    :param rdf_file: input RDF filepath
    :param onto_uri: URI of ontology
    :param date: if different from execution date
    :param rdf_format: input RDF serialization format, see <https://rdflib.readthedocs.io/en/stable/intro_to_parsing.html#saving-rdf>
    """
    date = datetime.today().strftime('%Y-%m-%d') if date is None else date
    date = Literal(date)
    g = Graph()
    g.parse(rdf_file, format=rdf_format)
    onto_node = URIRef(onto_uri)
    g.remove((onto_node, DCTERMS.date, None))
    g.add((onto_node, DCTERMS.date, date))
    g.serialize(format=rdf_format, destination=rdf_file)


def shield_human_file(ttl_human_file, ttl_machine_file):
    """
    Shielding head file generated by human (if available)
    :param ttl_human_file: original ttl file generated by human
    :param ttl_machine_file: equivalent file after serialization (human order and comments gone)
    """
    try:
        g = Graph()
        g.parse(ttl_human_file)
        g.serialize(destination=ttl_machine_file)
    except URLError:
        pass


def merge_data_file(ttl_meta_file, ttl_data_file):
    """
    Merge data into meta model ontology
    :param ttl_meta_file: metamodel
    :param ttl_data_file: data model
    """
    try:
        g = Graph()
        g.parse(ttl_meta_file)
        g.parse(ttl_data_file)
        g.serialize(destination=ttl_meta_file)
    except URLError:
        pass
